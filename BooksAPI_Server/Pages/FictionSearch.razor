@page "/fictionSearch"
@using BooksAPI_Server.Models
@using BooksAPI_Server.Services
@inject OpenLibraryService openLibraryService

<div class="container-fluid">
    <div class="row">
        <h3 class="col-12 p-2">Search Fiction</h3>
    </div>
    <div class="row">
        <div class="col-12 p-2">
            <input type="text" placeholder="Search Title"/>
        </div>
    </div>
    <div class="row">
        <div class="col-12 p-2">
            <input type="text" placeholder="Search Author"/> 
        </div>
    </div>
    <div class="row">
        <div class="col-12 pt-2">
            <h6 class="fw-bold">Published between years:</h6> 
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <input type="number" placeholder=1990 @bind-value="yearMin"/> and <input type="number" placeholder=2022 @bind-value="yearMax"/>
        </div>
    </div>
    <div class="row pt-3">
        <h6 class="fw-bold">Genre:</h6>
    </div>
    <div class="row">
        <div class="col-12 p-1">
            @*@(() => makes sure the code doesn't run before the button is clicked*@
            <button @onclick="@(() => AddSubject("fantasy"))">Fantasy</button>
            <button @onclick="@(() => AddSubject("historical+fiction"))">Historical Fiction</button>
            <button @onclick="@(() => AddSubject("horror"))">Horror</button>
            <button @onclick="@(() => AddSubject("humor"))">Humor</button>
            <button @onclick="@(() => AddSubject("literature"))">Literature</button>
        </div>         
    </div>
    <div class="row">
        <div class="col-12 p-1">
            <button @onclick="@(() => AddSubject("magic"))">Magic</button>
            <button @onclick="@(() => AddSubject("mystery+detective"))">Mystery/Detective</button>
            <button @onclick="@(() => AddSubject("plays"))">Plays</button>
            <button @onclick="@(() => AddSubject("poetry"))">Poetry</button>
            <button @onclick="@(() => AddSubject("romance"))">Romance</button>
        </div>
    </div>
    <div class="row">
        <div class="col-12 p-1">
            <button @onclick="@(() => AddSubject("science+fiction"))">Sci-Fi</button>
            <button @onclick="@(() => AddSubject("short+stories"))">Short Stories</button>
            <button @onclick="@(() => AddSubject("thriller"))">Thriller</button>
            <button @onclick="@(() => AddSubject("young+adult"))">Young Adult</button> 
        </div>
    </div>
    <div class="row">
        <div class="col-12 pt-3">
            <button @onclick="HandleSubmit">Submit</button>
        </div>
    </div> 
    @if (booksResponse != null && booksResponse.docs != null)
    {
        <div class="row m-3">

            @foreach (var item in booksResponse.docs)
            {           
                <div class="col-2 mt-3">
                    <p>@item.title</p>
                    <p>@item.first_publish_year</p>
                    <img src="@($"https://covers.openlibrary.org/b/id/{@item.cover_i}-M.jpg")" />
                </div>
            }
        </div>
    } 
    <div class="d-flex justify-content-center">
        <div class="col-12 m-3">
           <button class="m-2">Previous</button><button class="m-2">Next</button>
        </div>        
    </div>
</div>




@code {
    List<string> subjects = new List<string>();
    int? yearMin;
    int? yearMax;

    BooksResponse booksResponse;

    //Needs a method to be able to add string to List
    protected override void OnInitialized()
    {
        AddSubject("fiction");
    }

    private void AddSubject(string subject)
    {   
        subjects.Add($"\"{subject}\"");
    }

    private async Task HandleSubmit()
    {
        //These are the query strings that I'm looking for:
            //subject = ("fiction" + "${subject}" + "${subject}");
            //first_publish_year%3A[2000+TO+2022]
            //author=nora+roberts
            //title=witness
            //language:eng

        string query = "subject=";

        string rawSubjects = string.Join("+", subjects).ToString();
        rawSubjects = $"({rawSubjects})";

        query += rawSubjects;


        if (yearMin != null & yearMax != null)
        {
            query += $"&first_publish_year%3A[{yearMin}+TO+{yearMax}]&sort=new";
        }

        booksResponse = await openLibraryService.FictionSearch(query);
    }    

}

@page "/readingLists"
@using BooksAPI_Server.Models
@using BooksAPI_Server.Repositories;
@inject ToReadRepository ToReadRepository
@inject FavoritesRepository FavoritesRepository
@inject FavoriteAuthorRepository FavoriteAuthorRepository  
@inject AuthorRepository AuthorRepository
@inject FinishedRepository FinishedRepository
@inject FinishedAuthorRepository FinishedAuthorRepository
@inject IJSRuntime jsRuntime

<div class="container-fluid">    
    <h5><b>Fiction Book Lists</b></h5>
    <div class="row m-2">
        <ul>
            <li class="col-1 m-2 fiction-to-reads pointer" @onclick="GetFictionToReads">My Reading List</li>         
            <li class="col-1 m-2 fiction-favorites pointer" @onclick="GetFictionFavorites">My Favorites</li>      
            <li class="col-1 m-2 fiction-finished pointer" @onclick="GetFictionFinished">My Completed</li>        
        </ul>
    </div>

    <div class="row">
        <h5 class="col-12">Non-Fiction Reading Lists</h5>
    </div>
    <div class="row">
        <h6>Want to Read</h6>
    </div>
    <div class="row">
        <h6>Favorites</h6>
    </div>
    <div class="row">
        <h6>Finished</h6>
    </div>

    @if (toReads != null)
    {
        <div class="row">
            @foreach (var item in toReads)
            {
                <div class="col-2 m-2">                    
                    <div class="row">
                        <img class="col-12 cover-image" src="@($"https://covers.openlibrary.org/b/id/{@item.CoverI}-L.jpg")" />
                    </div>
                    <div class="mt-2 row d-flex justify-content-end">
                        <div class="col-2">
                            <i type="button" class="d-flex m-2 mr-3 fa-regular fa-heart justify-content-end" title="Add to Favorites" @onclick="() => AddToFavorites(item)"></i>
                        </div>
                        <div class="col-2">
                            <i type="button" class="m-2 mr-3 fa-solid fa-book" title="Add to Completed" @onclick="() => AddToReadsToFinished(item)"></i>
                        </div>
                        <div class="amazon-link col-6 d-flex justify-content-center">
                            @if (item.TenDigitIsbn != null)
                            {
                                <a href='@($"https://www.amazon.com/dp/{item.TenDigitIsbn}/?tag=internetarchi-20")' target="_blank" class="link-amazon">Amazon</a>
                            }
                            else
                            {
                                //Title & Author Search Amazon??
                            }
                        </div>
                        <div class="col-2">
                            <i type="button" class="m-2 mr-3 fa-solid fa-trash-can" title="Delete" @onclick="() => DeleteToRead(item.Id)" ></i>
                        </div>
                    </div>
                </div>
            }
        </div>    
    }

    @if (favorites != null)
    {
        <div class="row">
            @foreach (var item in favorites)
            {
                <div class="col-2 m-2">
                    <div class="row">
                        <img class="col-12 cover-image" src="@($"https://covers.openlibrary.org/b/id/{@item.CoverI}-L.jpg")" />
                    </div>
                    <div class="mt-2 row">                        
                        <div class="col-2">
                            <i type="button" class="m-2 mr-3 fa-solid fa-book" title="Add to Completed" @onclick="() => AddFavoriteToFinished(item)"></i>
                        </div>
                        <div class="amazon-link col-8 d-flex justify-content-center">
                            @if (item.TenDigitIsbn != null)
                            {
                                <a href='@($"https://www.amazon.com/dp/{item.TenDigitIsbn}/?tag=internetarchi-20")' target="_blank" class="link-amazon">Amazon</a>
                            }
                            else
                            {
                                //Title & Author Search Amazon??
                            }
                        </div>
                        <div class="col-2">
                            <i type="button" class="m-2 mr-3 fa-solid fa-trash-can" title="Delete" @*@onclick="() => DeleteFavorite(item)" *@></i>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    @if (finished != null)
    {
        <div class="row">
            @foreach (var item in finished)
            {
                <div class="col-2 m-2">
                    <div class="row">
                        <img class="col-12 cover-image" src="@($"https://covers.openlibrary.org/b/id/{@item.CoverI}-L.jpg")"/>
                    </div>
                    <div class="mt-2 row">
                        <div class="col-2">
                            <i type="button" class="m-2 mr-3 fa-solid fa-book" title="Add to Favorites" @onclick="() => AddFinishedToFavorites(item)"></i>
                        </div>
                        <div class="amazon-link col-8 d-flex justify-content-center">
                            @if (item.TenDigitIsbn != null)
                            {
                                <a href='@($"https://www.amazon.com/dp/{item.TenDigitIsbn}/?tag=internetarchi-20")' target="_blank" class="link-amazon">Amazon</a>
                            }
                            else
                            {
                                //Title & Author Search Amazon??
                            }
                        </div>
                        <div class="col-2">
                            <i type="button" class="m-2 mr-3 fa-solid fa-trash-can" title="Delete" @*@onclick="() => DeleteFinished(item)" *@></i>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

</div>

@code {
    List<ToRead> toReads = null;
    List<Favorite> favorites = null;
    List<Finished> finished = null;


    private void Clear()
    {
        toReads = null;
        favorites = null;
        finished = null;
    }

    private void GetFictionToReads()
    {
        Clear();
        toReads = ToReadRepository.GetFictionToReads();
    }

    private async Task AddToFavorites(ToRead toRead)
    {

        Favorite favorite = new Favorite();
        favorite.Key = toRead.Key;
        favorite.Title = toRead.Title;
        favorite.CoverI = toRead.CoverI;
        favorite.TenDigitIsbn = toRead.TenDigitIsbn;
        favorite.ThirteenDigitIsbn = toRead.ThirteenDigitIsbn;

        favorite = FavoritesRepository.CreateFavorite(favorite);

        //create FavoriteAuthor and Author Tables
        //load data and then check for null

        foreach (var toReadAuthor in toRead.ToReadAuthors)
        {
            //Author author = AuthorRepository.GetAuthorByName(toReadAuthor);
            Author author = toReadAuthor.Author;

            if (author != null)
            {
                FavoriteAuthor favoriteAuthor = new FavoriteAuthor();
                favoriteAuthor.FavoriteId = favorite.Id;
                favoriteAuthor.AuthorId = author.Id;

                favoriteAuthor = FavoriteAuthorRepository.CreateFavoriteAuthor(favoriteAuthor);
            }
            else
            {
                author = new Author();
                author.AuthorName = toReadAuthor.Author.AuthorName;
                author = AuthorRepository.CreateAuthor(author);

                FavoriteAuthor favoriteAuthor = new FavoriteAuthor();
                favoriteAuthor.FavoriteId = favorite.Id;
                favoriteAuthor.AuthorId = author.Id;

                favoriteAuthor = FavoriteAuthorRepository.CreateFavoriteAuthor(favoriteAuthor);
            }

            await jsRuntime.InvokeVoidAsync("ShowToastr", "success", "This book has been added to your favorites");
        }      
    }

    private void GetFictionFavorites()
    {
        Clear();
        favorites = FavoritesRepository.GetFictionFavorites();

    }

    private async Task AddFavoriteToFinished(Favorite favorite)
    {
        Finished finished = new Finished();
        finished.Key = favorite.Key;
        finished.Title = favorite.Title;
        finished.CoverI = favorite.CoverI;
        finished.TenDigitIsbn = favorite.TenDigitIsbn;
        finished.ThirteenDigitIsbn = favorite.ThirteenDigitIsbn;

        finished = FinishedRepository.CreateFinished(finished);

        foreach (var favoriteAuthor in favorite.FavoriteAuthors)
        {
            Author author = favoriteAuthor.Author;

            if (author != null)
            {
                FinishedAuthor finishedAuthor = new FinishedAuthor();
                finishedAuthor.FinishedId = finished.Id;
                finishedAuthor.AuthorId = author.Id;

                finishedAuthor = FinishedAuthorRepository.CreateFinishedAuthor(finishedAuthor);
            }
            else
            { 
                author = new Author();
                author.AuthorName = favoriteAuthor.Author.AuthorName;
                author = AuthorRepository.CreateAuthor(author);

                FinishedAuthor finishedAuthor = new FinishedAuthor();
                finishedAuthor.FinishedId = finished.Id;
                finishedAuthor.AuthorId = author.Id;

                finishedAuthor = FinishedAuthorRepository.CreateFinishedAuthor(finishedAuthor);                
            }

            await jsRuntime.InvokeVoidAsync("ShowToastr", "success", "This book has been added to your finished list");
        }
    }

    private async Task AddToReadsToFinished(ToRead toRead)
    {

        Finished finished = new Finished();
        finished.Key = toRead.Key;
        finished.Title = toRead.Title;
        finished.CoverI = toRead.CoverI;
        finished.TenDigitIsbn = toRead.TenDigitIsbn;
        finished.ThirteenDigitIsbn = toRead.ThirteenDigitIsbn;

        finished = FinishedRepository.CreateFinished(finished);


        foreach (var toReadAuthor in toRead.ToReadAuthors)
        {
            //Author author = AuthorRepository.GetAuthorByName(toReadAuthor);
            Author author = toReadAuthor.Author;

            if (author != null)
            {
                FinishedAuthor finishedAuthor = new FinishedAuthor();
                finishedAuthor.FinishedId = finished.Id;
                finishedAuthor.AuthorId = author.Id;

                finishedAuthor = FinishedAuthorRepository.CreateFinishedAuthor(finishedAuthor);
            }
            else
            {
                author = new Author();
                author.AuthorName = toReadAuthor.Author.AuthorName;
                author = AuthorRepository.CreateAuthor(author);

                FinishedAuthor finishedAuthor = new FinishedAuthor();
                finishedAuthor.FinishedId = finished.Id;
                finishedAuthor.AuthorId = author.Id;

                finishedAuthor = FinishedAuthorRepository.CreateFinishedAuthor(finishedAuthor);
            }

            await jsRuntime.InvokeVoidAsync("ShowToastr", "success", "This book has been added to your finished list");
        }
    }


    private async Task AddFinishedToFavorites(Finished finished)
    {

        Favorite favorite = new Favorite();
        favorite.Key = finished.Key;
        favorite.Title = finished.Title;
        favorite.CoverI = finished.CoverI;
        favorite.TenDigitIsbn = finished.TenDigitIsbn;
        favorite.ThirteenDigitIsbn = finished.ThirteenDigitIsbn;

        favorite = FavoritesRepository.CreateFavorite(favorite);

        foreach (var finishedAuthor in finished.FinishedAuthors)
        {
            //Author author = AuthorRepository.GetAuthorByName(toReadAuthor);
            Author author = finishedAuthor.Author;

            if (author != null)
            {
                FavoriteAuthor favoriteAuthor = new FavoriteAuthor();
                favoriteAuthor.FavoriteId = favorite.Id;
                favoriteAuthor.AuthorId = author.Id;

                favoriteAuthor = FavoriteAuthorRepository.CreateFavoriteAuthor(favoriteAuthor);
            }
            else
            {
                author = new Author();
                author.AuthorName = finishedAuthor.Author.AuthorName;
                author = AuthorRepository.CreateAuthor(author);

                FavoriteAuthor favoriteAuthor = new FavoriteAuthor();
                favoriteAuthor.FavoriteId = favorite.Id;
                favoriteAuthor.AuthorId = author.Id;

                favoriteAuthor = FavoriteAuthorRepository.CreateFavoriteAuthor(favoriteAuthor);
            }

            await jsRuntime.InvokeVoidAsync("ShowToastr", "success", "This book has been added to your completed");
        }  

    }

    private void GetFictionFinished()
    {
        Clear();
        finished = FinishedRepository.GetFictionFinished();

    }

    private async Task DeleteToRead(int Id)
    {        
        {
            bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this book?");
            ToReadRepository.DeleteToRead(Id);
            GetFictionToReads();
        }

        await jsRuntime.InvokeVoidAsync("ShowToastr", "success", "This book has been deleted");

    }




    

   


}

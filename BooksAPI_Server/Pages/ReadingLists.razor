@page "/readingLists"
@using BooksAPI_Server.Models
@using BooksAPI_Server.Repositories;
@inject ToReadRepository ToReadRepository
@inject FavoritesRepository FavoritesRepository
@inject FavoriteAuthorRepository FavoriteAuthorRepository  
@inject AuthorRepository AuthorRepository
@inject IJSRuntime jsRuntime

<div class="container-fluid">
    <div class="row">
        <h5 class="col-12">Fiction Reading Lists</h5>
    </div>    
    <div class="row">
        <button class="btn btn-primary col-1 fiction-to-read" @onclick="GetFictionToReads">Want to Read</button>
    </div>
    <div class="row">
        <h6>Favorites</h6>
    </div>
    <div class="row">
        <h6>Finished</h6>
    </div>

    <div class="row">
        <h5 class="col-12">Non-Fiction Reading Lists</h5>
    </div>
    <div class="row">
        <h6>Want to Read</h6>
    </div>
    <div class="row">
        <h6>Favorites</h6>
    </div>
    <div class="row">
        <h6>Finished</h6>
    </div>

    @if (toReads != null)
    {
        <div class="row">
            @foreach (var item in toReads)
            {
                <div class="col-2">
                    <img class="cover-image" src="@($"https://covers.openlibrary.org/b/id/{@item.CoverI}-M.jpg")" />
                    <div class="mt-2 row">
                        <div class="col-4">
                            <i type="button" class="m-2 mr-3 fa-regular fa-heart fa-xl" title="Add to Favorites" @onclick="() => AddToFavorites(item)"></i>
                            <i type="button" class="fa-solid fa-book" title="Finished" @onclick="BookIsFinished"></i>                            
                        </div>
                        <div class="col-8 justify-content-start">
                            @if (item.TenDigitIsbn != null)
                            {
                                <a href='@($"https://www.amazon.com/dp/{item.TenDigitIsbn}/?tag=internetarchi-20")' target="_blank" class="link-amazon">Amazon</a>
                            }
                            else
                            {
                                //Title & Author Search Amazon??
                            }
                        </div>
                    </div>
                </div>
            }
        </div>    
    }
</div>

@code {
    List<ToRead> toReads = null;

    public ReadingLists()
    {
    }

    private void GetFictionToReads()
    {
        toReads = ToReadRepository.GetFictionToReads();
    }

    private async void AddToFavorites(ToRead toRead)
    {

        Favorite favorite = new Favorite();
        favorite.Key = toRead.Key;
        favorite.Title = toRead.Title;
        favorite.CoverI = toRead.CoverI;
        favorite.TenDigitIsbn = toRead.TenDigitIsbn;
        favorite.ThirteenDigitIsbn = toRead.ThirteenDigitIsbn;

        favorite = FavoritesRepository.CreateFavorite(favorite);

        //create FavoriteAuthor and Author Tables
        //load data and then check for null

        foreach (var toReadAuthor in toRead.ToReadAuthors)
        {
            //Author author = AuthorRepository.GetAuthorByName(toReadAuthor);
            Author author = toReadAuthor.Author;

            if (author != null)
            {
                FavoriteAuthor favoriteAuthor = new FavoriteAuthor();
                favoriteAuthor.FavoriteId = favorite.Id;
                favoriteAuthor.AuthorId = author.Id;

                favoriteAuthor = FavoriteAuthorRepository.CreateFavoriteAuthor(favoriteAuthor);
            }
            else
            {
                author = new Author();
                author.AuthorName = toReadAuthor.Author.AuthorName;
                author = AuthorRepository.CreateAuthor(author);

                FavoriteAuthor favoriteAuthor = new FavoriteAuthor();
                favoriteAuthor.FavoriteId = favorite.Id;
                favoriteAuthor.AuthorId = author.Id;

                favoriteAuthor = FavoriteAuthorRepository.CreateFavoriteAuthor(favoriteAuthor);
            }

            await jsRuntime.InvokeVoidAsync("ShowToastr", "success", "This book has been added to your favorites");
        }      
    }

    private void BookIsFinished()
    {
        
    }



    

   


}
